import cv2
import numpy as np

# Initialize the camera
cap = cv2.VideoCapture(0)

# Set parameters for motion detection
ret, frame1 = cap.read()
ret, frame2 = cap.read()

# Create a blank canvas to draw motion trails
canvas = np.zeros_like(frame1)

while cap.isOpened():
    # Convert the frames to grayscale
    gray1 = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)


    gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)

    # Find the difference between the two frames
    diff = cv2.absdiff(gray1, gray2)

    # Apply a threshold to highlight motion
    _, thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)

    # Dilate the threshold image to fill in holes, making motion detection clearer
    dilated = cv2.dilate(thresh, None, iterations=3)

    # Find contours (the outline) of the motion
    contours, _ = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Draw contours and update the canvas with detected motion
    for contour in contours:
        if cv2.contourArea(contour) < 500:
            continue  # Ignore small movements
        x, y, w, h = cv2.boundingRect(contour)
        # Draw the motion rectangle on both the live frame and the canvas
        cv2.rectangle(frame1, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.rectangle(canvas, (x, y), (x + w, y + h), (255, 255, 255), -1)

    # Display the original frame and the canvas with motion trails
    cv2.imshow('Motion Tracker', frame1)
    cv2.imshow('Motion Trail', canvas)

    # Update frames for the next iteration
    frame1 = frame2
    ret, frame2 = cap.read()

    if cv2.waitKey(10) == ord('q'):
        break

# Release the camera and close the windows
cap.release()
cv2.destroyAllWindows()
