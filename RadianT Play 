import cv2
import mediapipe as mp
import numpy as np

# Initialize MediaPipe Pose and drawing utilities
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

# Initialize the camera capture
cap = cv2.VideoCapture(0)

# Create a simple function to draw a stick figure character imitating human pose
def draw_stick_figure(image, landmarks):
    height, width, _ = image.shape
    # Define connections to simulate stick figure joints
    stick_connections = [(11, 13), (13, 15),  # Left arm
                         (12, 14), (14, 16),  # Right arm
                         (11, 12),  # Shoulders
                         (23, 24),  # Hips
                         (23, 25), (25, 27),  # Left leg
                         (24, 26), (26, 28)]  # Right leg

    # Convert landmarks to 2D points
    points = []
    for lm in landmarks:
        points.append((int(lm.x * width), int(lm.y * height)))

    # Draw the stick figure using the connections
    for start_idx, end_idx in stick_connections:
        cv2.line(image, points[start_idx], points[end_idx], (0, 255, 0), 4)

# Start Pose detection
with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
    while cap.isOpened():
        ret, frame = cap.read()

        if not ret:
            break

        # Convert the frame to RGB as MediaPipe works with RGB
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Process the frame and detect pose landmarks
        results = pose.process(frame_rgb)

        # If pose landmarks are detected, extract and draw them
        if results.pose_landmarks:
            # Draw the detected pose landmarks
            mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

            # Imitate motion by drawing a stick figure based on detected landmarks
            draw_stick_figure(frame, results.pose_landmarks.landmark)

        # Display the frame with the stick figure
        cv2.imshow('Pose Imitation', frame)

        # Break the loop when 'q' is pressed
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

# Release the capture and close windows
cap.release()
cv2.destroyAllWindows() 